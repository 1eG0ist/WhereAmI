from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging
import imarkups as nav
from isqlighter import SQLighter
import sqlite3


TOKEN = '2144915050:AAFasIxNNZHD8MhSJn2pTnpaNP2mSfLQ0W8'

# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
db = SQLighter('probase.db')


@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    await bot.send_message(message.from_user.id,
                           '–ó–¥–∞—Ä–æ–≤–∞ {0.first_name}'.format(message.from_user),
                           reply_markup=nav.mainMenu)

# ~~~~~~~~~~~~~–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–¥–∞–Ω–∏—è~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


class DialogWithUser(StatesGroup):
    waiting_for_building_name = State()
    waiting_for_number_of_floors = State()
    waiting_for_town_address = State()
    waiting_for_street_address = State()
    waiting_for_number_address = State()


@dp.message_handler(Text(equals='‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–¥–∞–Ω–∏–µ'))
async def start_dialog_with_user(message: types.Message):
    # ~~~–∑–∞–ø–æ–º–∏–Ω–∞–µ–º id —é–∑–µ—Ä–∞~~~
    global user_id
    user_id = int(message.from_user.id)

    await message.answer('1. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –∑–¥–∞–Ω–∏—è')
    await DialogWithUser.waiting_for_building_name.set()


async def start_waiting_for_building_name(message: types.Message, state: FSMContext):
    await state.update_data(building_name=message.text.lower())
    await message.answer('2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –≤ –≤–∞—à–µ–º –∑–¥–∞–Ω–∏–∏')
    await DialogWithUser.next()


async def start_waiting_for_number_of_floors(message: types.Message, state: FSMContext):
    await state.update_data(number_of_building=message.text.lower())
    await DialogWithUser.next()
    await message.answer('3. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à–µ –∑–¥–∞–Ω–∏–µ: ')


async def start_waiting_for_town_address(message: types.Message, state: FSMContext):
    await state.update_data(building_town_address=message.text.lower())
    await DialogWithUser.next()
    await message.answer('4. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à–µ –∑–¥–∞–Ω–∏–µ: ')


async def start_waiting_for_street_address(message: types.Message, state: FSMContext):
    await state.update_data(building_street_address=message.text.lower())
    await DialogWithUser.next()
    await message.answer('5. –ü–æ—Å–ª–µ–¥–Ω–µ–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —ç—Ç–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–¥–∞–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π —É–ª–∏—Ü–µ')


async def start_waiting_for_number_address(message: types.Message, state: FSMContext):
    await state.update_data(building_number_address=message.text.lower())
    user_new_building_data = await state.get_data()
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∑–¥–∞–Ω–∏–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "
                         f"{user_new_building_data['building_name']}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –∫–æ—Ç–æ—Ä–æ–≥–æ - "
                         f"{user_new_building_data['number_of_building']} –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–Ω–æ –≤ –≥–æ—Ä–æ–¥–µ "
                         f"{user_new_building_data['building_town_address']} –ø–æ –∞–¥—Ä–µ—Å—É "
                         f"{user_new_building_data['building_street_address']}, "
                         f"{user_new_building_data['building_number_address']}")
    adding_build(user_new_building_data)
    await state.finish()


# ~~~~~~~~~~~~~~~~~~~~–§—É–Ω–∫—Ü–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –±–µ—Ä—É—â–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–¥~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@dp.message_handler(Text(equals='üíï–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'))
async def favourites_buildings(message: types.Message):
    url_keyboard = InlineKeyboardMarkup(row_width=2)
    id_user = int(message.from_user.id)
    favour_list = db.show_favourites_user_buildings(id_user)
    for i in favour_list:
        url_keyboard.add(InlineKeyboardButton(i, callback_data=i))
    await message.answer('–í–∞—à–∏ –∑–¥–∞–Ω–∏—è', reply_markup=url_keyboard)

    @dp.callback_query_handler(lambda c: c.data in favour_list)
    async def reaction_on_favourites_buildings(callback_query: types.CallbackQuery):
        await bot.answer_callback_query(callback_query.id, callback_query['data'])

# ~~~~~~~~~~~~~~~~~~~~~~~–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–¥–∞–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


@dp.message_handler(Text(equals='‚Äº–£–¥–∞–ª–∏—Ç—å –û–î–ù–û –∑–¥–∞–Ω–∏–µ'))
async def delete_from_fav_building(message: types.Message):
    url_keyboard = InlineKeyboardMarkup(row_width=2)
    id_user = int(message.from_user.id)
    favour_list = db.show_favourites_user_buildings(id_user)
    for i in favour_list:
        url_keyboard.add(InlineKeyboardButton(i, callback_data=i))
    await message.answer('–í–∞—à–∏ –∑–¥–∞–Ω–∏—è', reply_markup=url_keyboard)

    @dp.callback_query_handler(lambda c: c.data in favour_list)
    async def reverse_status_user_with_build(callback_query: types.CallbackQuery):
        db.update_building_from_user(callback_query['data'], id_user, 0)
        await bot.send_message(message.from_user.id, f"–ó–¥–∞–Ω–∏–µ {callback_query['data']}"
                                                     f" –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö")

# ~~~~~~~~~~~~~~~~~~~~~~~–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–¥–∞–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


@dp.message_handler(Text(equals='‚ö†‚ùó‚õî–£–î–ê–õ–ò–¢–¨ –í–°–ï –ó–î–ê–ù–ò–Ø –ò–ó –ò–ó–ë–†–ê–ù–ù–û–ì–û –ë–ï–ó–í–û–ó–í–†–ê–¢–ù–û'))
async def delete_from_fav_building(message: types.Message):
    db.update_all_buildings_from_user(int(message.from_user.id), 0)

# ~~~~~~~~~~~~~~~~~~~~~~~~–°–≤—è–∑—å –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text == '‚¨Ö–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await bot.send_message(message.from_user.id, '*–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ*', reply_markup=nav.mainMenu)
    elif message.text == 'üíï–ò–∑–±—Ä–∞–Ω–Ω–æ–µ':
        await bot.send_message(message.from_user.id, '*–ò–ó–ë–†–ê–ù–ù–û–ï*', reply_markup=nav.LikeMenu)

    elif message.text == '–î—Ä—É–≥–æ–µ‚û±':
        await bot.send_message(message.from_user.id, '*–î–†–£–ì–û–ï*',
                               reply_markup=nav.otherMenu)

    elif message.text == '‚öô–ü–∞—Ä–∞–º–µ—Ç—Ä—ã':
        await bot.send_message(message.from_user.id, '*–ú–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤*', reply_markup=nav.SettingsMenu)

    elif message.text == 'üìú–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–¥–∞–Ω–∏—è':
        await bot.send_message(message.from_user.id, '–¢—É—Ç –Ω–∞–¥–æ –∏–∑ SQLite –≤–∑—è—Ç—å –≤—Å–µ –∑–¥–∞–Ω–∏—è')

    elif message.text == '‚õî–£–¥–∞–ª–∏—Ç—å –í–°–ï –∑–¥–∞–Ω–∏—è':
        await bot.send_message(message.from_user.id,
                               '–ï—Å–ª–∏ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–¥–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑',
                               reply_markup=nav.DelAllBuildsMenu)

    elif message.text == '‚ö†‚ùó‚õî–£–î–ê–õ–ò–¢–¨ –í–°–ï –ó–î–ê–ù–ò–Ø –ë–ï–ó–í–û–ó–í–†–ê–¢–ù–û':
        await bot.send_message(message.from_user.id, '—Ç—É—Ç –≤–æ—Ç —Ç–∏–ø–æ —É–¥–∞–ª–∏—Ç—Å—è –≤—Å—è –±–¥ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∑–¥–∞–Ω–∏–π')

    elif message.text == '‚úö‚ù•–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ':
        await bot.send_message(message.from_user.id, '–ì—Ä—É—Å—Ç–Ω–æ')

    else:
        await message.reply('–≠–¢–û –®–¢–û 0_–æ, –Ω–µ –ø–æ–Ω—è–ª... –ù–û—Ä–º–∞–ª—å–Ω–æ –æ–±—â–∞–π—Å—è!')


def register_handler_builds(dp1: Dispatcher):
    dp1.register_message_handler(start_dialog_with_user, commands='building', state="*")
    dp1.register_message_handler(start_waiting_for_building_name,
                                 state=DialogWithUser.waiting_for_building_name)

    dp1.register_message_handler(start_waiting_for_number_of_floors,
                                 state=DialogWithUser.waiting_for_number_of_floors)

    dp1.register_message_handler(start_waiting_for_town_address,
                                 state=DialogWithUser.waiting_for_town_address)

    dp1.register_message_handler(start_waiting_for_street_address,
                                 state=DialogWithUser.waiting_for_street_address)

    dp1.register_message_handler(start_waiting_for_number_address,
                                 state=DialogWithUser.waiting_for_number_address)


def adding_build(slovarik):
    id_of_user = db.get_user_id(user_id)
    if len(id_of_user) == 0:
        db.add_user(user_id)
        id_of_user = db.get_user_id(user_id)
    db.add_build(id_of_user, slovarik['building_name'], slovarik['number_of_building'],
                 slovarik['building_town_address'], slovarik['building_street_address'],
                 slovarik['building_number_address'])


register_handler_builds(dp)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
