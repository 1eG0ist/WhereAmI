from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging
import imarkups as nav
from isqlighter import SQLighter


TOKEN = '2144915050:AAFasIxNNZHD8MhSJn2pTnpaNP2mSfLQ0W8'

# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
db = SQLighter('probase.db')


@dp.message_handler(commands=['subscribe'])
@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    await bot.send_message(message.from_user.id,
                           '–ó–¥–∞—Ä–æ–≤–∞ {0.first_name}'.format(message.from_user),
                           reply_markup=nav.mainMenu)

# ~~~~~~~~~~~~~–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–¥–∞–Ω–∏—è~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


class DialogWithUser(StatesGroup):
    waiting_for_building_name = State()
    waiting_for_number_of_floors = State()
    waiting_for_town_address = State()
    waiting_for_street_address = State()
    waiting_for_number_address = State()
    adding_photos_from_user = State()


@dp.message_handler(Text(equals='üî®üì∑–î–æ–±–∞–≤–∏—Ç—å –∑–¥–∞–Ω–∏–µ –≤ –±–æ—Ç–∞ –ª–∏—á–Ω–æ'))
async def start_dialog_with_user(message: types.Message):
    # ~~~–∑–∞–ø–æ–º–∏–Ω–∞–µ–º id —é–∑–µ—Ä–∞~~~
    global user_id
    user_id = int(message.from_user.id)

    await message.answer("1. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –∑–¥–∞–Ω–∏—è: \n –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ "
                         "–Ω–æ–≤–æ–≥–æ –∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '–û—Ç–º–µ–Ω–∞' –≤ —á–∞—Ç, –∏–ª–∏ –∫–æ–º–º–∞–Ω–¥—É "
                         "'/–æ—Ç–º–µ–Ω–∞'.\n–ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å, —Ç–æ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥', –≤—ã –≤–µ—Ä–Ω–µ—Ç–µ—Å—å "
                         "–Ω–∞ –æ–¥–∏–Ω —à–∞–≥ –Ω–∞–∑–∞–¥.", reply_markup=nav.AddingBuildMenu)
    await DialogWithUser.waiting_for_building_name.set()


async def start_waiting_for_building_name(message: types.Message, state: FSMContext):
    await state.update_data(building_name=message.text.lower())
    if (message.text.lower(),) in db.show_all_buildings_names():
        await message.answer(f"–ó–¥–∞–Ω–∏–µ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º {message.text} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, "
                             f"–ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –∫–∞–∫ —Ä–∞–∑ —Ç–æ –∑–¥–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –∏—â–∏—Ç–µ "
                             f"–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏–π —Å–æ–≤–ø–∞–ª–∏ –ø–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏, –Ω–∞–∑–æ–≤–∏—Ç–µ "
                             f"–∑–¥–∞–Ω–∏–µ –ø–æ –¥—Ä—É–≥–æ–º—É")
        await message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è")
        await DialogWithUser.previous()
        await DialogWithUser.next()
    else:
        await message.answer('2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –≤ –≤–∞—à–µ–º –∑–¥–∞–Ω–∏–∏')
        await DialogWithUser.next()


async def start_waiting_for_number_of_floors(message: types.Message, state: FSMContext):
    await state.update_data(number_of_building=message.text.lower())
    await message.answer('3. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à–µ –∑–¥–∞–Ω–∏–µ')
    await DialogWithUser.next()


async def start_waiting_for_town_address(message: types.Message, state: FSMContext):
    await state.update_data(building_town_address=message.text.lower())
    await message.answer('4. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à–µ –∑–¥–∞–Ω–∏–µ')
    await DialogWithUser.next()


async def start_waiting_for_street_address(message: types.Message, state: FSMContext):
    await state.update_data(building_street_address=message.text.lower())
    await message.answer('5. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–¥–∞–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π —É–ª–∏—Ü–µ')
    await DialogWithUser.next()


async def start_waiting_for_number_address(message: types.Message, state: FSMContext):
    await state.update_data(building_number_address=message.text.lower())
    user_new_building_data = await state.get_data()
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∑–¥–∞–Ω–∏–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "
                         f"{user_new_building_data['building_name']}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –∫–æ—Ç–æ—Ä–æ–≥–æ - "
                         f"{user_new_building_data['number_of_building']} –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–Ω–æ –≤ –≥–æ—Ä–æ–¥–µ "
                         f"{user_new_building_data['building_town_address']} –ø–æ –∞–¥—Ä–µ—Å—É "
                         f"{user_new_building_data['building_street_address']}, "
                         f"{user_new_building_data['building_number_address']}",
                         reply_markup=nav.AddingPhotosMenu)
    adding_build(user_new_building_data, user_id)
    await DialogWithUser.next()


async def start_adding_photos_from_user(message: types.Message, state: FSMContext):
    # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –µ–¥–∏–Ω–æ–∂–¥—ã, —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ
    if 'lst_of_photos' not in locals() and 'lst_of_photos' not in globals():
        lst_of_photos = [[]]
    print(lst_of_photos)
    if message.text.lower() == '—Å–ª–µ–¥—É—é—â–µ–µ':
        lst_of_photos.append([])
    elif message.text == '‚úî–ó–∞–≤–µ—Ä—à–∏—Ç—å':
        await message.answer('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')

        await state.finish()
    else:
        lst_of_photos[-1].append(message.text)
        await message.answer('–í–≤–æ–¥–∏ –¥–∞–ª—å—à–µ')
# -------------------------–û—Ç–∫–∞—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


async def cmd_previous(message: types.Message, state: FSMContext):
    if await state.get_state() is None:
        return
    if await state.get_state() == 'DialogWithUser:waiting_for_building_name':
        await message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –ø–µ—Ä–≤–æ–º')
        return
    await message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥")
    await DialogWithUser.previous()

# --------------------–§—É–Ω–∫—Ü–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞'))
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–¥–∞–Ω–∏—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ", reply_markup=nav.mainMenu)

# ~~~~~~~~~~~~~~~~~~~–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤ –±–¥ –∑–¥–∞–Ω–∏—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é~~~~~~~~~~~~~~~~~~~


class Addexistingbuilding(StatesGroup):
    ex_wait_building_name = State()


@dp.message_handler(Text(equals='üîç–î–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –≤ –±–æ—Ç–µ –∑–¥–∞–Ω–∏–µ'))
async def add_another_building(message: types.Message):
    await bot.send_message(message.from_user.id,
                           '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–¥–∞–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏',
                           reply_markup=types.ReplyKeyboardRemove())
    await Addexistingbuilding.ex_wait_building_name.set()


async def add_name_of_another_building(message: types.Message, state: FSMContext):
    if (message.text.lower(),) in db.show_all_buildings_names():
        if len(db.check_on_added_buildings_of_user(message.text.lower(), int(message.from_user.id))) == 0:
            db.add_another_building_to_user(message.text.lower(), int(message.from_user.id))
            await message.answer(f"–ó–¥–∞–Ω–∏–µ {message.text} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.",
                                 reply_markup=nav.AddingChoiceMenu)
        else:
            await message.answer(f"–ó–¥–∞–Ω–∏–µ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ {message.text} —É–∂–µ –µ—Å—Ç—å —É –≤–∞—Å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.",
                                 reply_markup=nav.AddingChoiceMenu)
    else:
        await bot.send_message(message.from_user.id, "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç–∞–∫–æ–≥–æ –∑–¥–∞–Ω–∏—è –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –µ—â–µ –Ω–µ "
                                                     "–¥–æ–±–∞–≤–ª—è–ª–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã –≤–≤–µ–ª–∏ –∏–º—è "
                                                     "–≤–∞—à–µ–≥–æ –∑–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –¥–∞, —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º —Å–∞–º–∏–º "
                                                     "–¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à–µ –∑–¥–∞–Ω–∏–µ.",
                               reply_markup=nav.AddingChoiceMenu)
    await state.finish()


# ~~~~~~~~~~~~~~~~~~~~–§—É–Ω–∫—Ü–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –±–µ—Ä—É—â–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–¥~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


@dp.message_handler(Text(equals='üíï–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'))
async def favourites_buildings(message: types.Message):
    url_keyboard = InlineKeyboardMarkup(row_width=2)
    id_user = int(message.from_user.id)
    favour_list = db.show_favourites_user_buildings(id_user)
    for i in favour_list:
        url_keyboard.add(InlineKeyboardButton(i, callback_data=i))
    await message.answer('–í–∞—à–∏ –∑–¥–∞–Ω–∏—è', reply_markup=url_keyboard)
    db.show_all_buildings_names()

    @dp.callback_query_handler(lambda c: c.data in favour_list)
    async def reaction_on_favourites_buildings(callback_query: types.CallbackQuery):
        await bot.answer_callback_query(callback_query.id, callback_query['data'])

# ~~~~~~~~~~~~~~~~~~~~~~~–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–¥–∞–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


@dp.message_handler(Text(equals='‚Äº–£–¥–∞–ª–∏—Ç—å –û–î–ù–û –∑–¥–∞–Ω–∏–µ'))
async def delete_from_fav_building(message: types.Message):
    url_keyboard = InlineKeyboardMarkup(row_width=2)
    id_user = int(message.from_user.id)
    favour_list = db.show_favourites_user_buildings(id_user)
    for i in favour_list:
        url_keyboard.add(InlineKeyboardButton(i, callback_data=i))
    await message.answer('–í–∞—à–∏ –∑–¥–∞–Ω–∏—è', reply_markup=url_keyboard)

    @dp.callback_query_handler(lambda c: c.data in favour_list)
    async def reverse_status_user_with_build(callback_query: types.CallbackQuery):
        db.delete_building_from_user(callback_query['data'], id_user)
        await bot.send_message(message.from_user.id, f"–ó–¥–∞–Ω–∏–µ {callback_query['data']}"
                                                     f" –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö")

# ~~~~~~~~~~~~~~~~~~~~~~~–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–¥–∞–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


@dp.message_handler(Text(equals='‚ö†‚ùó‚õî–£–î–ê–õ–ò–¢–¨ –í–°–ï –ó–î–ê–ù–ò–Ø –ò–ó –ò–ó–ë–†–ê–ù–ù–û–ì–û –ë–ï–ó–í–û–ó–í–†–ê–¢–ù–û'))
async def delete_from_fav_building(message: types.Message):
    db.delete_all_buildings_from_user(int(message.from_user.id))

# ~~~~~~~~~~~~~~~~~~~~~~~~–°–≤—è–∑—å –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text == '‚¨Ö–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await bot.send_message(message.from_user.id, '*–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ*', reply_markup=nav.mainMenu)
    elif message.text == 'üíï–ò–∑–±—Ä–∞–Ω–Ω–æ–µ':
        await bot.send_message(message.from_user.id, '*–ò–ó–ë–†–ê–ù–ù–û–ï*', reply_markup=nav.LikeMenu)

    elif message.text == '–î—Ä—É–≥–æ–µ‚û±':
        await bot.send_message(message.from_user.id, '*–î–†–£–ì–û–ï*',
                               reply_markup=nav.otherMenu)

    elif message.text == '‚öô–ü–∞—Ä–∞–º–µ—Ç—Ä—ã':
        await bot.send_message(message.from_user.id, '*–ú–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤*', reply_markup=nav.SettingsMenu)

    elif message.text == 'üìú–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–¥–∞–Ω–∏—è':
        await bot.send_message(message.from_user.id, '–¢—É—Ç –Ω–∞–¥–æ –∏–∑ SQLite –≤–∑—è—Ç—å –≤—Å–µ –∑–¥–∞–Ω–∏—è')

    elif message.text == '‚õî–£–¥–∞–ª–∏—Ç—å –í–°–ï –∑–¥–∞–Ω–∏—è':
        await bot.send_message(message.from_user.id,
                    '–ï—Å–ª–∏ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–¥–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑',
                               reply_markup=nav.DelAllBuildsMenu)
    elif message.text == '‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–¥–∞–Ω–∏–µ':
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ',
                               reply_markup=nav.AddingChoiceMenu)

    elif message.text == '‚ö†‚ùó‚õî–£–î–ê–õ–ò–¢–¨ –í–°–ï –ó–î–ê–ù–ò–Ø –ë–ï–ó–í–û–ó–í–†–ê–¢–ù–û':
        await bot.send_message(message.from_user.id, '—Ç—É—Ç –≤–æ—Ç —Ç–∏–ø–æ —É–¥–∞–ª–∏—Ç—Å—è –≤—Å—è –±–¥ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∑–¥–∞–Ω–∏–π')

    elif message.text == '‚úö‚ù•–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ':
        await bot.send_message(message.from_user.id, '–ì—Ä—É—Å—Ç–Ω–æ')

    else:
        await message.reply('–≠–¢–û –®–¢–û 0_–æ, –Ω–µ –ø–æ–Ω—è–ª... –ù–û—Ä–º–∞–ª—å–Ω–æ –æ–±—â–∞–π—Å—è!')


def register_handler_buildings(dp: Dispatcher):
    dp.register_message_handler(start_dialog_with_user, commands='building', state="*")
    dp.register_message_handler(cmd_cancel, state="*", commands="–æ—Ç–º–µ–Ω–∞")
    dp.register_message_handler(cmd_cancel, Text(equals="–æ—Ç–º–µ–Ω–∞", ignore_case=True), state="*")
    dp.register_message_handler(cmd_previous, Text(equals="–Ω–∞–∑–∞–¥", ignore_case=True), state="*")
    dp.register_message_handler(start_waiting_for_building_name,
                                state=DialogWithUser.waiting_for_building_name)

    dp.register_message_handler(start_waiting_for_number_of_floors,
                                state=DialogWithUser.waiting_for_number_of_floors)

    dp.register_message_handler(start_waiting_for_town_address,
                                state=DialogWithUser.waiting_for_town_address)

    dp.register_message_handler(start_waiting_for_street_address,
                                state=DialogWithUser.waiting_for_street_address)

    dp.register_message_handler(start_waiting_for_number_address,
                                state=DialogWithUser.waiting_for_number_address)

    dp.register_message_handler(start_adding_photos_from_user,
                                state=DialogWithUser.adding_photos_from_user)


def register_existing_handler_buildings(dp: Dispatcher):
    dp.register_message_handler(add_another_building, commands='addexisbuilding', state="*")
    dp.register_message_handler(add_name_of_another_building,
                                state=Addexistingbuilding.ex_wait_building_name)


def adding_build(slovarik, user_id):
    id_of_user = db.get_user_id(user_id)
    if len(id_of_user) == 0:
        db.add_user(user_id)
        id_of_user = db.get_user_id(user_id)
    db.add_new_build(id_of_user, slovarik['building_name'], slovarik['number_of_building'],
                     slovarik['building_town_address'], slovarik['building_street_address'],
                     slovarik['building_number_address'])


register_handler_buildings(dp)
register_existing_handler_buildings(dp)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
