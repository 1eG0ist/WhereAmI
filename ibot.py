import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import imarkups as nav
from isqlighter import SQLighter
import sqlite3
TOKEN = '2144915050:AAFasIxNNZHD8MhSJn2pTnpaNP2mSfLQ0W8'

# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
db = SQLighter('probase.db')


@dp.message_handler(commands=['subscribe'])
async def subscribe(message: types.Message):
    if not db.user_exists(message.from_user.id):
        db.add_user(message.from_user.id)
    else:
        db.update_user(message.from_user.id, True)

    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å")


@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    await bot.send_message(message.from_user.id,
                           '–ó–¥–∞—Ä–æ–≤–∞ {0.first_name}'.format(message.from_user),
                           reply_markup=nav.mainMenu)


@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text == '‚¨Ö–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await bot.send_message(message.from_user.id, '*–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ*', reply_markup=nav.mainMenu)
        
    elif message.text == 'üíï–ò–∑–±—Ä–∞–Ω–Ω–æ–µ':
        await bot.send_message(message.from_user.id, '*–ò–ó–ë–†–ê–ù–ù–û–ï*', reply_markup=nav.LikeMenu)
        
    elif message.text == '–î—Ä—É–≥–æ–µ‚û±':
        await bot.send_message(message.from_user.id, '*–î–†–£–ì–û–ï*',
                               reply_markup=nav.otherMenu)

    elif message.text == '‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–¥–∞–Ω–∏–µ':
        await bot.send_message(message.from_user.id,
                               '–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: \n*–ù–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è*,*–°–∫–æ–ª—å–∫–æ –≤ –∑–¥–∞–Ω–∏–∏ —ç—Ç–∞–∂–µ–π*',
                               reply_markup=nav.addMenu)
        
    elif message.text == '‚öôÔ∏è–ü–∞—Ä–∞–º–µ—Ç—Ä—ã':
        await bot.send_message(message.from_user.id, '*–ú–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤*', reply_markup=nav.SettingsMenu)
        
    elif message.text == 'üìú–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–¥–∞–Ω–∏—è':
        await bot.send_message(message.from_user.id, '–¢—É—Ç –Ω–∞–¥–æ –∏–∑ SQLite –≤–∑—è—Ç—å –≤—Å–µ –∑–¥–∞–Ω–∏—è')

    elif message.text == '‚õî–£–¥–∞–ª–∏—Ç—å –í–°–ï –∑–¥–∞–Ω–∏—è':
        await bot.send_message(message.from_user.id,
                '–ï—Å–ª–∏ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–¥–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑',
                        reply_markup=nav.DelAllBuildsMenu)

    elif message.text == '‚ö†‚ùó‚õî–£–î–ê–õ–ò–¢–¨ –í–°–ï –ó–î–ê–ù–ò–Ø –ë–ï–ó–í–û–ó–í–†–ê–¢–ù–û':
        await bot.send_message(message.from_user.id, '—Ç—É—Ç –≤–æ—Ç —Ç–∏–ø–æ —É–¥–∞–ª–∏—Ç—Å—è –≤—Å—è –±–¥ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∑–¥–∞–Ω–∏–π')
    
    elif message.text == '‚Äº–£–¥–∞–ª–∏—Ç—å –û–î–ù–û –∑–¥–∞–Ω–∏–µ':
        await bot.send_message(message.from_user.id, '–¢—É—Ç –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π')

    elif message.text == '‚úö‚ù•–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ':
        await bot.send_message(message.from_user.id,
            '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'
            '(–≤–æ—Ç —Ç—É—Ç –Ω–∞–¥–æ –≤ –±–¥ –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ —Å—Ç–æ–ª–±–∏–∫—É —Å –∏–º–µ–Ω–∞–º–∏ –∑–¥–∞–Ω–∏–π –∏ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –¥—Ä—É–≥—É—é –±–¥ - –∏–∑–±—Ä–∞–Ω–Ω–æ–µ)')

    else:
        await message.reply('–≠–¢–û –®–¢–û 0_–æ, –Ω–µ –ø–æ–Ω—è–ª... –ù–û—Ä–º–∞–ª—å–Ω–æ –æ–±—â–∞–π—Å—è!')

        
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
