from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ContentType
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging
import imarkups as nav
from isqlighter import SQLighter
from protected_token import TOKEN_copy as T
from functions import SimpleFunctions as SMLF
from functions import StatesFunctions as STFUNC
from PIL import Image

# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=T)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
db = SQLighter('probase.db')


@dp.message_handler(Text(equals='!'))
@dp.message_handler(commands=['start', 'subscribe'])
async def command_start(message: types.Message):
    await bot.send_message(message.from_user.id,
                           '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, {0.first_name}'.format(message.from_user),
                           reply_markup=nav.mainMenu)
    if len(db.get_user_id(message.from_user.id)) == 0:
        db.add_user(message.from_user.id)


@dp.message_handler(commands=['help'])
async def command_help(message: types.Message):
    await bot.send_message(message.from_user.id, "–≠—Ç–æ –±–æ—Ç –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤"
                                                 "—É—á–µ–±–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ "
                                                 "'/start' –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π "
                                                 "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞: \n1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–¥–∞–Ω–∏–π –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ "
                                                 "(–∫–∞–∫ —Å–≤–æ–µ–≥–æ —Ç–∞–∫ –∏ —á—É–∂–æ–≥–æ).\n2. –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø—É—Ç—å –¥–æ "
                                                 "–Ω—É–∂–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –≤–∞–º —Å–ø–µ—Ä–≤–∞ –Ω—É–∂–Ω–æ –∑–∞–π—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É "
                                                 "–∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –ø–æ—Å–ª–µ –≤—ã–±—Ä–∞—Ç—å –∑–¥–∞–Ω–∏–µ –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è "
                                                 "–∫–∞–±–∏–Ω–µ—Ç, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞.\n"
                                                 "3. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–∞–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –≤–∞–º –Ω—É–∂–Ω–æ —Å–ø–µ—Ä–≤–∞ "
                                                 "–∑–∞–π—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É '–¥—Ä—É–≥–æ–µ', –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã–±—Ä–∞—Ç—å –≤–∫–ª–∞–¥–∫—É "
                                                 "'‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–¥–∞–Ω–∏–µ' –∏ –∑–∞–π—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É "
                                                 "'üîç–î–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –≤ –±–æ—Ç–µ –∑–¥–∞–Ω–∏–µ' –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å "
                                                 "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–¥–∞–Ω–∏—è.\n 4. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ "
                                                 "–∏–ª–∏ –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞–º –Ω—É–∂–Ω–æ –≤–æ –≤–∫–ª–∞–¥–∫–µ "
                                                 "'–¥—Ä—É–≥–æ–µ' –≤–æ–π—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã' –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã–±—Ä–∞—Ç—å "
                                                 "—Ç–æ, —á—Ç–æ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ\n 5. –ü–æ–∫–∞ –≤—Å–µ, –ü–æ–∫–∞!")

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞~~~~~~~~~~~~~~~~~~~~~~~~~~~~


class AddNewAdmin(StatesGroup):
    wait_tg_id_for_add_in_admins = State()


@dp.message_handler(commands=['add_admin'])
async def adding_new_admin(message: types.message):
    if message.from_user.id != 999734133:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ telegram id —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å 'admin'")
        await AddNewAdmin.wait_tg_id_for_add_in_admins.set()


async def take_new_admin_tg_id(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        if not db.check_user_on_admin_status(message.text):
            if len(str(message.text)) > 10 or len(str(message.text)) < 8:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º id –Ω–µ –º–æ–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å")
            else:
                db.add_new_admin(message.text)
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º id —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å 'admin'")
                await bot.send_message(message.text, "–í–∞–º –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å 'admin'")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º id —É–∂–µ –æ–±–ª–∞–¥–∞–µ—Ç —Ä–æ–ª—å—é 'admin'")
        await state.finish()
    else:
        await message.answer(f"–í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ id -> —á–∏—Å–ª–æ")


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


class AddNewPhotographer(StatesGroup):
    wait_tg_id_for_add_in_photographers = State()


@dp.message_handler(commands=['add_photographer'])
async def adding_new_photographer(message: types.Message):
    if not db.check_user_on_admin_status(message.from_user.id):
        await message.answer(f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
    else:
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å 'photographer'")
        await AddNewPhotographer.wait_tg_id_for_add_in_photographers.set()


async def take_new_photographer_tg_id(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        if not db.check_user_on_photographer_status(int(message.text)):
            if len(str(message.text)) > 10 or len(str(message.text)) < 8:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º id –Ω–µ –º–æ–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å")
            else:
                db.add_new_photographer(message.text)
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º id —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å 'photographer'")
                await bot.send_message(message.text, "–í–∞–º –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å 'photographer'")
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º id —É–∂–µ –æ–±–ª–∞–¥–∞–µ—Ç —Ä–æ–ª—å—é 'photographer'")
        await state.finish()
    else:
        await message.answer(f"–í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ id -> —á–∏—Å–ª–æ")


# ~~~~~~~~~~~~~~~~~~~~~~~~–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–¥–∞–Ω–∏—è~~~~~~~~~~~~~~~~~~~~~~~~~~~


class DialogWithUser(StatesGroup):
    waiting_for_building_name = State()
    waiting_for_number_of_floors = State()
    waiting_for_town_address = State()
    waiting_for_street_address = State()
    waiting_for_number_address = State()
    waiting_for_office_numbers = State()
    wait_for_entrance_photo = State()
    adding_photos_from_user = State()
    wait_new_last_number = State()


@dp.message_handler(Text(equals='üî®üì∑–î–æ–±–∞–≤–∏—Ç—å –∑–¥–∞–Ω–∏–µ –≤ –±–æ—Ç–∞ –ª–∏—á–Ω–æ'))
async def start_dialog_with_user(message: types.Message):
    if not db.check_user_on_photographer_status(message.from_user.id):
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ 'photographer',  "
                             "–∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏–π, –µ—Å–ª–∏ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ "
                             "–¥–æ–±–∞–≤–∏—Ç—å –∑–¥–∞–Ω–∏–µ, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —á–µ–ª–æ–≤–µ–∫—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ <—Å—Å—ã–ª–∫–∞>, —É–∫–∞–∑–∞–≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ "
                             "–≥–æ—Ä–æ–¥ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è –ø–ª–∞–Ω –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å. –î–õ–Ø –¢–û–ì–û, –ß–¢–û–ë–´ –î–û–ë–ê–í–ò–¢–¨ –ó–î–ê–ù–ò–ï –≤ "
                             "–±–æ—Ç–∞ –≤–∞–º –Ω—É–∂–µ–Ω –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ—á–µ–Ω—å:\n1. –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–¥–∞–Ω–∏–∏: "
                             "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å, –∫–æ–ª-–≤–æ —ç—Ç–∞–∂–µ–π.\n2.–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–¥–∞–Ω–∏—è(—Ñ–æ—Ç–æ –≤—Ö–æ–¥–∞"
                             "(–≤–Ω—É—Ç—Ä–∏, —Å—Ä–∞–∑—É –≤–æ–π–¥—è –≤ –∑–¥–∞–Ω–∏–µ), —Ñ–æ—Ç–æ –≤—Å–µ—Ö –ª–µ—Å—Ç–Ω–∏—Ü –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–∂–µ, —Ñ–æ—Ç–æ –∫–∞—Ä–∏–¥–æ—Ä–æ–≤, —Ñ–æ—Ç–æ "
                             "–¥–≤–µ—Ä–µ–π –∫–∞–±–∏–Ω–µ—Ç–æ–≤ —Å –∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ –∫–∞–¥—Ä–µ). –° –ö–ê–ñ–î–û–ô –ü–†–ï–î–´–î–£–©–ï–ô –§–û–¢–û–ì–†–ê–§–ò–ò –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –í–ò–î–ù–ê "
                             "–°–õ–ï–î–£–Æ–©–ê–Ø")
    else:
        await message.answer("–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∞ –Ω–∞–∏–ø–æ–¥—Ä–æ–±–Ω–µ–π—à–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ –∏ –∫—É–¥–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å"
                             "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ "
                             "–Ω–æ–≤–æ–≥–æ –∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '–û—Ç–º–µ–Ω–∞' –≤ —á–∞—Ç, –∏–ª–∏ –∫–æ–º–º–∞–Ω–¥—É "
                             "'/–æ—Ç–º–µ–Ω–∞'.\n–ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å, —Ç–æ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥', –≤—ã –≤–µ—Ä–Ω–µ—Ç–µ—Å—å "
                             "–Ω–∞ –æ–¥–∏–Ω —à–∞–≥ –Ω–∞–∑–∞–¥.")

        await message.answer("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
        await message.answer("1. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –∑–¥–∞–Ω–∏—è:", reply_markup=nav.AddingBuildMenu)
        await DialogWithUser.waiting_for_building_name.set()


async def start_waiting_for_building_name(message: types.Message, state: FSMContext):
    await state.update_data(building_name=message.text.lower())
    if (message.text.lower(),) in db.show_all_buildings_names():
        await message.answer(f"–ó–¥–∞–Ω–∏–µ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º {message.text} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, "
                             f"–ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –∫–∞–∫ —Ä–∞–∑ —Ç–æ –∑–¥–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –∏—â–∏—Ç–µ "
                             f"–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏–π —Å–æ–≤–ø–∞–ª–∏ –ø–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏, –Ω–∞–∑–æ–≤–∏—Ç–µ "
                             f"–∑–¥–∞–Ω–∏–µ –ø–æ –¥—Ä—É–≥–æ–º—É")
        await message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è")
        await DialogWithUser.previous()
        await DialogWithUser.next()
    else:
        await message.answer('2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –≤ –≤–∞—à–µ–º –∑–¥–∞–Ω–∏–∏')
        await DialogWithUser.next()


async def start_waiting_for_number_of_floors(message: types.Message, state: FSMContext):
    await state.update_data(number_of_building=message.text.lower())
    await message.answer('3. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à–µ –∑–¥–∞–Ω–∏–µ')
    await DialogWithUser.next()


async def start_waiting_for_town_address(message: types.Message, state: FSMContext):
    await state.update_data(building_town_address=message.text.lower())
    await message.answer('4. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à–µ –∑–¥–∞–Ω–∏–µ')
    await DialogWithUser.next()


async def start_waiting_for_street_address(message: types.Message, state: FSMContext):
    await state.update_data(building_street_address=message.text.lower())
    await message.answer('5. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–¥–∞–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π —É–ª–∏—Ü–µ')
    await DialogWithUser.next()


async def start_waiting_for_number_address(message: types.Message, state: FSMContext):
    await state.update_data(building_number_address=message.text.lower())
    user_new_building_data = await state.get_data()
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∑–¥–∞–Ω–∏–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "
                         f"{user_new_building_data['building_name']}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –∫–æ—Ç–æ—Ä–æ–≥–æ - "
                         f"{user_new_building_data['number_of_building']} –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–Ω–æ –≤ –≥–æ—Ä–æ–¥–µ "
                         f"{user_new_building_data['building_town_address']} –ø–æ –∞–¥—Ä–µ—Å—É "
                         f"{user_new_building_data['building_street_address']}, "
                         f"{user_new_building_data['building_number_address']}",
                         reply_markup=nav.AddingPhotosMenu)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≤—Å–µ—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –∏–¥—É—Ç –ø–æ–¥—Ä—è–¥, —Ç–æ –≤—ã "
                         f"–º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∏—Ö —Ç–∞–∫: 557-560 –∏–ª–∏ 345-360,401-420.\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ "
                         f"—Å–ª–µ–≤–∞-–±–æ–ª—å—à–µ–µ —Å–ø—Ä–∞–≤–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤ —Ü–µ–ª–æ–º –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞–±–∏–Ω–µ—Ç—ã –æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É")
    SMLF.adding_build(user_new_building_data, int(message.from_user.id))
    await state.update_data(photos=[[1]])
    await DialogWithUser.next()


async def take_numbers_of_building(message: types.Message, state: FSMContext):
    mtext = message.text
    offices_list = []
    try:
        for number in mtext.split(','):
            if number.count('-') > 1:
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ–≤–µ—Ä–Ω–æ —Å–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–∫–∞–∑–∞–ª–∏ –ª–∏—à–Ω–µ–µ -, "
                                     "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ—á–µ–Ω—å –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –µ—â–µ —Ä–∞–∑")
                await DialogWithUser.previous()
                await DialogWithUser.next()
            elif number.count('-') == 1:
                for i in range(int(number.split('-')[0]), int(number.split('-')[1])+1):
                    offices_list.append(i)
            else:
                offices_list.append(number)
        offices_list = list(map(int, offices_list))
        await state.update_data(offices_list=offices_list)
        await message.answer("–¢–µ–ø–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤—Ö–æ–¥–∞ –≤ –≤–∞—à–µ –∑–¥–∞–Ω–∏–µ(–≤–Ω—É—Ç—Ä–∏, —Å–ø–∏–Ω–æ–π –∫ –≤—Ö–æ–¥–Ω–æ–π "
                             "–¥–≤–µ—Ä–∏) –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ –∫–∞–∫ <–í–•–û–î>, –∫–æ–≥–¥–∞ –≤—ã –¥–æ–±–∞–≤–∏—Ç–µ –≤—Å–µ –∫–∞–±–∏–Ω–µ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ /stop")
        await DialogWithUser.next()

    except Exception:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ—á–µ–Ω—å –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –µ—â–µ —Ä–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "
                             "–µ–≥–æ –∑–∞–Ω–æ–≤–æ")


async def adding_entrance_of_building(message: types.Message, state: FSMContext):
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ 1, –≥–¥–µ 0-–º—ã–ª–æ, 1-–Ω–æ—Ä–º, 2-—Ö–æ—Ä–æ—à–æ, 3-–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        await message.photo[1].download('photo_beta.jpg')
        # –°–∫–∞—á–∏–≤–∞–µ–º —É–∂–µ —Å–∂–∞—Ç–æ–µ –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è 1 —Ñ–æ—Ç–æ –ø–æ–¥ –∏–º–µ–Ω–µ–º photo.jpg
        Image.open('photo_beta.jpg').save('photo.jpg')

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        photo1 = STFUNC.convert_to_binary_data('photo.jpg')

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ –≤ –±–¥
        building_data = await state.get_data()
        graph_id = db.add_photo_in_graph(photo1, building_data['building_name'], message.caption, -1)
        await state.update_data(last_number=graph_id)
        await message.answer(f"–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≤–µ—Ç–≤–ª–µ–Ω–∏—è –∏–º–µ–µ—Ç –Ω–æ–º–µ—Ä {graph_id}, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ "
                             f"–ø—É—Å—Ç–∏—Ç—å –≤–µ—Ç–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞—á–∏–Ω–∞—è –æ—Ç —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä")

        await message.answer(f"–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å –∫–∞–∂–¥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä - "
                             f"<–ø—Ä–æ–π–¥–∏—Ç–µ –≤–ø–µ—Ä–µ–¥ –ø–æ –∫–æ—Ä–∏–¥–æ—Ä—É –¥–æ —É–ø–æ—Ä–∞> –∏–ª–∏ <–≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –¥–≤–µ—Ä—å>")

        await message.answer(f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∞—à–∞ —Å–ª–µ–¥—É—é—â–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å—Å—è –∫ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–π, –µ—Å–ª–∏ –≤–∞–º "
                             f"–Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <–Ω–æ–≤–∞—è –≤–µ—Ç–∫–∞> –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Å "
                             f"–∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–æ–≤–∞—è –≤–µ—Ç–∫–∞")

        await message.answer(f"–í–ê–ñ–ù–û: –∫–æ–≥–¥–∞ –≤–µ—Ç–≤—å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∏ –Ω–∞ —Ñ–æ—Ç–æ –∫–∞–±–∏–Ω–µ—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤–µ–¥–µ—Ç –ø—É—Ç—å –≤ –ø–æ–¥–ø–∏—Å–∏ "
                             f"–∫ –Ω–µ–º—É –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –µ–≥–æ –Ω–æ–º–µ—Ä")

        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ—á—Ç–∏—Ç–µ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

        await message.answer(f"–í–≤–æ–¥–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ")
        await DialogWithUser.next()

    except Exception:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")


async def start_adding_photos_from_user(message: types.Message, state: FSMContext):
    if message.content_type == 'text':
        if message.text == "–ù–æ–≤–∞—è –≤–µ—Ç–∫–∞":
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è")
            await DialogWithUser.next()
    else:
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ 1, –≥–¥–µ 0-–º—ã–ª–æ, 1-–Ω–æ—Ä–º, 2-—Ö–æ—Ä–æ—à–æ, 3-–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            await message.photo[1].download('photo_beta.jpg')

            # –°–∫–∞—á–∏–≤–∞–µ–º —É–∂–µ —Å–∂–∞—Ç–æ–µ –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è 1 —Ñ–æ—Ç–æ –ø–æ–¥ –∏–º–µ–Ω–µ–º photo.jpg
            Image.open('photo_beta.jpg').save('photo.jpg')

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            photo1 = STFUNC.convert_to_binary_data('photo.jpg')

            building_data = await state.get_data()

            graph_id = db.add_photo_in_graph(photo1, building_data['building_name'],
                                             message.caption, building_data['last_number'])

            await state.update_data(last_number=graph_id)
            await message.answer(f"–Ω–æ–º–µ—Ä —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ - {graph_id}")

        except Exception:
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∑–∞–Ω–æ–≤–æ, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ "
                                 "–Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–∞–∫ —á—Ç–æ —É–±–µ–¥–∏—Ç–µ—Å—å, "
                                 "—á—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–ª –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ —Ñ–æ—Ç–æ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä–æ–π –≤—ã —É–∫–∞–∑–∞–ª–∏")


async def start_waiting_for_last_number(message: types.Message, state: FSMContext):
    try:
        await state.update_data(last_number=message.text)
        await message.answer("–¢–µ–ø–µ—Ä—å —Å–ª–µ–¥—É—é—â–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é: ")
        await DialogWithUser.previous()
    except Exception:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")


# -------------------------–û—Ç–∫–∞—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


async def cmd_previous(message: types.Message, state: FSMContext):
    if await state.get_state() is None:
        return
    if await state.get_state() == 'DialogWithUser:waiting_for_building_name':
        await message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –ø–µ—Ä–≤–æ–º')
        return
    await message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥")
    await DialogWithUser.previous()

# --------------------–§—É–Ω–∫—Ü–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


@dp.message_handler(commands=['stop'])
@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞'))
@dp.message_handler(Text(equals='‚úî–ó–∞–≤–µ—Ä—à–∏—Ç—å'))
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω", reply_markup=nav.mainMenu)

# ~~~~~~~~~~~~~~~~~~~–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤ –±–¥ –∑–¥–∞–Ω–∏—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é~~~~~~~~~~~~~~~~~~~


class Addexistingbuilding(StatesGroup):
    ex_wait_building_name = State()


@dp.message_handler(Text(equals='üîç–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'))
async def add_another_building(message: types.Message):
    await bot.send_message(message.from_user.id,
                           '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–¥–∞–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏',
                           reply_markup=types.ReplyKeyboardRemove())
    await Addexistingbuilding.ex_wait_building_name.set()


async def add_name_of_another_building(message: types.Message, state: FSMContext):
    if (message.text.lower(),) in db.show_all_buildings_names():
        if len(db.check_on_added_buildings_of_user(message.text.lower(), int(message.from_user.id))) == 0:
            db.add_another_building_to_user(message.text.lower(), int(message.from_user.id))
            await message.answer(f"–ó–¥–∞–Ω–∏–µ {message.text} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.",
                                 reply_markup=nav.FollowMenu)
        else:
            await message.answer(f"–ó–¥–∞–Ω–∏–µ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ {message.text} —É–∂–µ –µ—Å—Ç—å —É –≤–∞—Å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.",
                                 reply_markup=nav.FollowMenu)
    else:
        await bot.send_message(message.from_user.id, "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç–∞–∫–æ–≥–æ –∑–¥–∞–Ω–∏—è –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –µ—â–µ –Ω–µ "
                                                     "–¥–æ–±–∞–≤–ª—è–ª–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã –≤–≤–µ–ª–∏ –∏–º—è "
                                                     "–≤–∞—à–µ–≥–æ –∑–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –¥–∞, —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º —Å–∞–º–∏–º "
                                                     "–¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à–µ –∑–¥–∞–Ω–∏–µ.",
                               reply_markup=nav.FollowMenu)
    await state.finish()


# ~~~~~~~~~~~~~~~~~~~~–§—É–Ω–∫—Ü–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –±–µ—Ä—É—â–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–¥~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


class WayToOffice(StatesGroup):
    follow_list_wait_for_building_name = State()
    wait_for_office_number = State()
    send_photo = State()


@dp.message_handler(Text(equals='üìÑ–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'))
async def favourites_buildings(message: types.Message):
    url_keyboard = InlineKeyboardMarkup(row_width=2)
    favour_list = db.show_favourites_user_buildings(int(message.from_user.id))
    if len(favour_list) == 0:
        await message.answer("–£ –≤–∞—Å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è")
        return
    for i in favour_list:
        url_keyboard.add(InlineKeyboardButton(i, callback_data=i))
    await message.answer('–í–∞—à–∏ –∑–¥–∞–Ω–∏—è',
                         reply_markup=url_keyboard)
    await WayToOffice.follow_list_wait_for_building_name.set()


async def reaction_on_favourites_buildings(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer(callback['data'])
    await state.update_data(building=callback['data'])
    await bot.send_message(int(callback.from_user.id), "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞")
    await state.update_data(send_number=1)
    await WayToOffice.next()


async def take_number_of_building(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        print(message.text)
        graph_id = db.search_for_needed_id(data['building'], message.text)
        await state.update_data(offices_list=db.search_for_needed_office(graph_id, [])[::-1])
        await message.answer("–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ', –¥–ª—è –æ—Ç–º–µ–Ω—ã "
                             "–ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'", reply_markup=nav.PhotosSendMenu)
        data = await state.get_data()
        await bot.send_photo(int(message.from_user.id), data['offices_list'][0][0], data['offices_list'][0][1])
        await WayToOffice.next()

    except Exception:
        await message.answer(f"–ü–æ—Ö–æ–∂–µ —Ç–∞–∫–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –≤ –∑–¥–∞–Ω–∏–∏ –Ω–µ—Ç, –ø–æ–∏—Å–∫ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω", reply_markup=nav.mainMenu)
        await state.finish()


async def send_photo_to_user(message: types.Message, state: FSMContext):
    try:
        if message.text == "–°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ":
            data = await state.get_data()
            await bot.send_photo(int(message.from_user.id),
                                   data['offices_list'][data['send_number']][0],
                                   data['offices_list'][data['send_number']][1])

            if data['send_number'] == len(data['offices_list'])-1:
                await message.answer("–í—ã —É —Ü–µ–ª–∏", reply_markup=nav.mainMenu)
                await state.finish()
            else:
                await state.update_data(send_number=int(data['send_number'])+1)

        else:
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "
                                 "'–°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ', –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ")
    except Exception:
        await message.answer("–ü–æ—Ö–æ–∂–µ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—É—Ç–∏ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞", reply_markup=nav.mainMenu)


# ~~~~~~~~~~~~~~~~~~~~~~~–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–¥–∞–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


class DellOneBuild(StatesGroup):
    hold_for_building_name = State()


@dp.message_handler(Text(equals='‚Äº–£–¥–∞–ª–∏—Ç—å –û–î–ù–û –∑–¥–∞–Ω–∏–µ'))
async def delete_from_fav_building(message: types.Message):
    url_keyboard = InlineKeyboardMarkup(row_width=2)
    favour_list = db.show_favourites_user_buildings(int(message.from_user.id))
    if len(favour_list) == 0:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–¥–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —É–¥–∞–ª–∏—Ç—å")
        return
    for i in favour_list:
        url_keyboard.add(InlineKeyboardButton(i, callback_data=f"DELONE_{i}"))
    await message.answer('–í–∞—à–∏ –∑–¥–∞–Ω–∏—è', reply_markup=url_keyboard)
    await DellOneBuild.hold_for_building_name.set()


async def reverse_status_user_with_building(callback_query: types.CallbackQuery, state: FSMContext):
    db.delete_building_from_user(callback_query['data'].split('_')[1], int(callback_query.from_user.id))
    await bot.send_message(callback_query.from_user.id, f"–ó–¥–∞–Ω–∏–µ {callback_query['data'].split('_')[1]}"
                                                        f" –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö")
    await callback_query.answer(callback_query['data'].split('_')[1])
    await state.finish()


# ~~~~~~~~~~~~~~~~~~~~~~~~–°–≤—è–∑—å –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


@dp.message_handler(content_types=ContentType.ANY)
async def bot_message(message: types.Message):
    if message.text == '‚¨Ö–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await bot.send_message(message.from_user.id, '*–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ*', reply_markup=nav.mainMenu)

    elif message.content_type == 'sticker':
        await message.answer('–¢—ã –ø—Ä–∏—Å–ª–∞–ª –º–Ω–µ —Å—Ç–∏–∫–µ—Ä')

    elif message.text == 'üíï–ò–∑–±—Ä–∞–Ω–Ω–æ–µ':
        await bot.send_message(message.from_user.id, '*–ò–ó–ë–†–ê–ù–ù–û–ï*', reply_markup=nav.FollowMenu)

    elif message.text == '–î—Ä—É–≥–æ–µ‚û±':
        await bot.send_message(message.from_user.id, '*–î–†–£–ì–û–ï*',
                               reply_markup=nav.otherMenu)

    elif message.text == '‚ûñ–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ':
        await bot.send_message(message.from_user.id, '*–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è*', reply_markup=nav.SettingsMenu)

    elif message.text == '‚õî–£–¥–∞–ª–∏—Ç—å –í–°–ï –∑–¥–∞–Ω–∏—è':
        await bot.send_message(message.from_user.id,
                               '–ï—Å–ª–∏ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–¥–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑',
                               reply_markup=nav.DelAllBuildsMenu)

    elif message.text == '‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–¥–∞–Ω–∏–µ':
        await bot.send_message(message.from_user.id,
                               '–ò–º–µ–π—Ç–µ –≤–≤–∏–¥–µ, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ª—é–¥—è–º, —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é',
                               reply_markup=nav.AddingChoiceMenu)

    elif message.text == '‚ö†‚ùó‚õî–£–î–ê–õ–ò–¢–¨ –í–°–ï –ó–î–ê–ù–ò–Ø –ò–ó –ò–ó–ë–†–ê–ù–ù–û–ì–û –ë–ï–ó–í–û–ó–í–†–ê–¢–ù–û':
        db.delete_all_buildings_from_user(int(message.from_user.id))
        await message.answer("–ó–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")

    else:
        await message.reply('–ú–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ')


def register_handler_buildings(dp: Dispatcher):
    dp.register_message_handler(start_dialog_with_user, commands='building', state="*")
    dp.register_message_handler(cmd_cancel, state="*", commands="stop")
    dp.register_message_handler(cmd_cancel, Text(equals="–û—Ç–º–µ–Ω–∞"), state="*")
    dp.register_message_handler(cmd_cancel, Text(equals='‚úî–ó–∞–≤–µ—Ä—à–∏—Ç—å'), state='*')
    dp.register_message_handler(cmd_previous, Text(equals="–Ω–∞–∑–∞–¥", ignore_case=True), state="*")
    dp.register_message_handler(start_waiting_for_building_name,
                                state=DialogWithUser.waiting_for_building_name)

    dp.register_message_handler(start_waiting_for_number_of_floors,
                                state=DialogWithUser.waiting_for_number_of_floors)

    dp.register_message_handler(start_waiting_for_town_address,
                                state=DialogWithUser.waiting_for_town_address)

    dp.register_message_handler(start_waiting_for_street_address,
                                state=DialogWithUser.waiting_for_street_address)

    dp.register_message_handler(start_waiting_for_number_address,
                                state=DialogWithUser.waiting_for_number_address)

    dp.register_message_handler(take_numbers_of_building,
                                state=DialogWithUser.waiting_for_office_numbers)

    dp.register_message_handler(adding_entrance_of_building, content_types=['sticker', 'photo', 'text'],
                                state=DialogWithUser.wait_for_entrance_photo)

    dp.register_message_handler(start_adding_photos_from_user,
                                content_types=['sticker', 'photo', 'text'],  # –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
                                state=DialogWithUser.adding_photos_from_user)

    dp.register_message_handler(start_waiting_for_last_number, state=DialogWithUser.wait_new_last_number)


def register_existing_handler_buildings(dp: Dispatcher):
    dp.register_message_handler(add_another_building, commands='addexisbuilding', state="*")
    dp.register_message_handler(add_name_of_another_building, content_types='text',
                                state=Addexistingbuilding.ex_wait_building_name)


def register_adding_new_admin_func(dp: Dispatcher):
    dp.register_message_handler(adding_new_admin, commands='add_admin', state='*')
    dp.register_message_handler(take_new_admin_tg_id, content_types='text',
                                state=AddNewAdmin.wait_tg_id_for_add_in_admins)


def register_adding_new_photographer_func(dp: Dispatcher):
    dp.register_message_handler(adding_new_photographer, commands='add_photographer', state='*')
    dp.register_message_handler(take_new_photographer_tg_id, content_types='text',
                                state=AddNewPhotographer.wait_tg_id_for_add_in_photographers)


def register_del_building(dp: Dispatcher):
    dp.register_message_handler(delete_from_fav_building, Text(equals='‚Äº–£–¥–∞–ª–∏—Ç—å –û–î–ù–û –∑–¥–∞–Ω–∏–µ'), state='*')
    dp.register_callback_query_handler(reverse_status_user_with_building, state=DellOneBuild.hold_for_building_name)


def register_way_to_office(dp: Dispatcher):
    dp.register_message_handler(favourites_buildings, Text(equals="üìÑ–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"), state='*')
    dp.register_message_handler(cmd_cancel, Text(equals="–û—Ç–º–µ–Ω–∞"), state="*")
    dp.register_callback_query_handler(reaction_on_favourites_buildings,
                                       state=WayToOffice.follow_list_wait_for_building_name)
    dp.register_message_handler(take_number_of_building,
                                state=WayToOffice.wait_for_office_number)
    dp.register_message_handler(send_photo_to_user, state=WayToOffice.send_photo)


register_way_to_office(dp)
register_handler_buildings(dp)
register_existing_handler_buildings(dp)
register_adding_new_admin_func(dp)
register_adding_new_photographer_func(dp)
register_del_building(dp)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
